# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - '*'

stages:
  - stage: Build
    jobs:
      - job: ubuntu_node_12

        pool:
          vmImage: 'ubuntu-16.04'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '12.x'
            displayName: 'Install Node.js'

          - script: |
              npm ci && npm run testonly
            displayName: 'npm ci && npm run testonly'

      - job: ubuntu_node_10

        pool:
          vmImage: 'ubuntu-16.04'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'

          - script: |
              npm ci && npm run test:ci
            displayName: 'npm ci && npm run test:ci'

          - script: |
              npm pack
            workingDirectory: $(Build.SourcesDirectory)/dist
            displayName: 'npm pack'

          - task: CopyFiles@2
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/dist'
              contents: '*.tgz'
              targetFolder: $(Build.ArtifactStagingDirectory)/npm
            displayName: 'Copy npm package'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/npm'
              artifact: npm
            displayName: 'Publish npm artifact'

      - job: ubuntu_node_8

        pool:
          vmImage: 'ubuntu-16.04'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '8.x'
            displayName: 'Install Node.js'

          - script: |
              npm install && npm run testonly
            displayName: 'npm install && npm run testonly'

      - job: ubuntu_node_6

        pool:
          vmImage: 'ubuntu-16.04'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '6.x'
            displayName: 'Install Node.js'

          - script: |
              npm install && npm run testonly
            displayName: 'npm install && npm run testonly'

  - stage: Publish
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    jobs:
      - deployment: PublishNpmModule
        displayName: Publish
        continueOnError: true

        pool:
          vmImage: 'ubuntu-16.04'

        strategy:
          runOnce:
            deploy:
              steps:
                - task: NodeTool@0
                  displayName: 'Use Node 10.x'
                  inputs:
                    versionSpec: 10.x

                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Pipeline Artifact'
                  inputs:
                    artifactName: npm
                    targetPath: '$(System.DefaultWorkingDirectory)'

                - task: ExtractFiles@1
                  displayName: 'Extract package'
                  inputs:
                    archiveFilePatterns: '$(System.DefaultWorkingDirectory)/npm/*.tgz'
                    destinationFolder: '$(System.DefaultWorkingDirectory)/npm-publish'

                - bash: |
                    packageName=`node -p "const p = require('./package.json'); p.name;"`
                    echo "##vso[task.setvariable variable=packageName]$packageName"

                    packageVersion=`node -p "const p = require('./package.json'); p.version;"`
                    echo "##vso[task.setvariable variable=packageVersion]$packageVersion"

                    sourceBranch=$(Build.SourceBranch)
                    gitVersion=${sourceBranch:11}

                    if [ "$packageVersion" != "$gitVersion" ]
                    then
                      echo ERROR: Package version "$packageVersion" does not match git tag v"$gitVersion" 1>&2
                      exit 1
                    fi
                  workingDirectory: '$(System.DefaultWorkingDirectory)/npm-publish/package'
                  displayName: 'Extract version'

                - task: Npm@1
                  displayName: 'npm publish'
                  inputs:
                    command: publish
                    workingDir: '$(System.DefaultWorkingDirectory)/npm-publish/package'
                    verbose: false
                    publishEndpoint: 'apollo-bot-npm-publish'

                - task: GitHubRelease@0
                  displayName: 'GitHub release (create)'
                  inputs:
                    gitHubConnection: 'apollo-bot2-github'
                    tagSource: manual
                    tag: 'v$(packageVersion)'
                    title: 'v$(packageVersion)'
                    releaseNotesSource: input
                    releaseNotes: 'Published to https://www.npmjs.com/package/$(packageName)/v/$(packageVersion)'
                    assets: '$(System.DefaultWorkingDirectory)/npm/*.tgz'

                - bash: 'curl --show-error --fail -X POST -H ''Content-type: application/json'' --data ''{"text":"Version `$(packageVersion)` of `$(packageName)` has been released :rocket:\n\nGitHub: https://github.com/apollographql/graphql-js/releases/tag/v$(packageVersion)\nnpm: https://www.npmjs.com/package/$(packageName)/v/$(packageVersion)"}'' $HOOK_URL'
                  displayName: 'Slack webhook'
                  env:
                    HOOK_URL: $(APOLLO_SLACK_HOOK_URL)
